0000:                       .org 00h                                ; power up 
0000: 02 01 00              ljmp start                      ; when the micro wa
                                                                    ; the main 
0100:              .org 100h                                ; and located at ad
                   start: 
0100: 12 01 24              lcall init                      ; Start the serial 
                            loop:                           ; Now, endlessly re
0103: 12 01 3E                      lcall getnum    ; Get the first number
0106: C0 E0                         push acc
0108: 88 E0                         mov acc, R0
010A: A9 E0                         mov R1, acc
010C: D0 E0                         pop acc
010E: 12 01 3E                      lcall getnum    ; Get the second number
0111: C0 E0                         push acc
0113: 88 E0                         mov acc, R0
0115: AA E0                         mov R2, acc
0117: D0 E0                         pop acc
0119: 12 01 85                      lcall getsymbol         ; Get the + or -
011C: 12 01 76                      lcall crlf              ; Call carriage ret
011F: 12 01 76                      lcall crlf              ; Call carriage ret
0122: 80 DF                 sjmp loop
                            
                   init:
                   ; set up serial port with a 11.0592 MHz crystal,
                   ; use timer 1 for 9600 baud serial communications
0124: 75 89 20              mov tmod, #20h          ; set timer 1 for auto relo
0127: 75 88 40              mov tcon, #40h          ; run timer 1
012A: 75 8D FD              mov th1,  #0FDh                 ; set 9600 baud wit
012D: 75 98 50              mov scon, #50h          ; set serial control reg fo
                                                                    ; and mode 
0130: 75 90 00              mov P1, #00h            ; Clear the LED bank
0133: 22                    ret
                            
                   getchr:
                   ; This routine "gets" or receives a character from the PC, t
                   ; the serial port. RI is the same as SCON.0 - the assembler 
                   ; either shorthand. The 7-bit ASCII code is returned in the 
                   
0134: 30 98 FD              jnb ri, getchr          ; wait till character recei
0137: E5 99                 mov a, sbuf                     ; get character and
0139: 54 7F                 anl a, #7fh                     ; mask off 8th bit
013B: C2 98                 clr ri
013D: 22                    ret
                   
                   getnum:
                   ; This routine gets the three characters from the keyboard a
                   
013E: C0 E0                 push acc                ; push the accumulator to s
                            
0140: 12 01 34              lcall getchr    ; <- gets first numeral from the PC
0143: 12 01 6E              lcall sndchr    ; -> and then echoes the character 
0146: 24 D0                 add a, #0D0h    ; Turns the ASCII code into the num
0148: 75 F0 64              mov b, #64h             ; Puts decimal 100 in regis
014B: A4                    mul ab                  ; Multiplies the first nume
014C: FB                    mov R3, a               ; Moves the lowest byte res
                            
014D: 12 01 34              lcall getchr    ; <- gets second numeral from the P
0150: 12 01 6E              lcall sndchr    ; -> and then echoes the character 
0153: 24 D0                 add a, #0D0h    ; Turns the ASCII code into the num
0155: 75 F0 0A              mov b, #0Ah             ; Puts decimal 10 in regist
0158: A4                    mul ab                  ; Multiplies the first nume
0159: 2B                    add a, R3               ; Adds this numeral with th
015A: FB                    mov R3, a               ; Moves the lowest byte res
                            
015B: 12 01 34              lcall getchr    ; <- gets third numeral from the PC
015E: 12 01 6E              lcall sndchr    ; -> and then echoes the character 
0161: 24 D0                 add a, #0D0h    ; Turns the ASCII code into the num
0163: 2B                    add a, R3               ; Adds this numeral with th
0164: A8 E0                 mov R0, acc             ; Moves the result into R0
0166: 12 01 76              lcall crlf              ; Call carriage return/line
                            
0169: 88 90                 mov P1, R0              ; pushes to LED bank for de
                            
016B: D0 E0                 pop acc                         ; pop the old accum
016D: 22                    ret
                            
                   sndchr:
                   ; This routine "sends" or transmits a character to the PC, u
                   ; port. The character to be sent is stored in the accumulato
                   ; TI are the same as far as the assembler is concerned.
                   
016E: C2 99                 clr scon.1                      ; clear the ti comp
0170: F5 99                 mov sbuf, a                     ; move a character 
                   txloop:
0172: 30 99 FD              jnb scon.1, txloop      ; wait till chr is sent
0175: 22                    ret
                            
                   crlf:
                   ; This routine sends a linefeed and a carriage return when c
                   
0176: C0 E0                 push acc                        ; push the old accu
0178: 74 0A                 mov a, #0Ah                     ; Move linefeed cha
017A: 12 01 6E              lcall sndchr            ; Send linefeed character
017D: 74 0D                 mov a, #0Dh                     ; Move carriage ret
017F: 12 01 6E              lcall sndchr            ; Send carriage return char
0182: D0 E0                 pop acc                                 ; pop the o
0184: 22                    ret
                   
                   getsymbol:
                   ; This routine gets the + or - from the user             
                   
0185: C0 E0                 push acc                                ; push the 
0187: 12 01 34              lcall getchr                    ; <- gets symbol fr
018A: B4 2B 0C              cjne a, #02Bh, notadd   ; if the symbol is not +, j
018D: 12 01 6E              lcall sndchr                    ; print +       
0190: 12 01 76              lcall crlf                              ; Call carr
0193: 12 01 A8              lcall addnums                   ; add the numbers
0196: D0 E0                 pop acc                                         ; p
0198: 22                    ret
                            
                            notadd:                                         ; j
0199: B4 2D E9              cjne a, #02Dh, getsymbol        ; if the symbol isn
019C: 12 01 6E              lcall sndchr                    ; print -
019F: 12 01 76              lcall crlf                              ; Call carr
01A2: 12 01 B5              lcall subnums                   ; subtract the numb
01A5: D0 E0                 pop acc                                         ; p
01A7: 22                    ret     
                            
                   addnums:
                   ; This routine adds the numbers in R1 and R2
01A8: C0 E0                 push acc                                ; pushes th
01AA: 89 E0                 mov acc, R1                             ; moves R1 
01AC: 2A                    add a, R2                               ; add R1 an
01AD: F5 90                 mov P1, a                               ; move the 
01AF: 12 01 C2              lcall dispnum                   ; display the resul
01B2: D0 E0                 pop acc                                         ; p
01B4: 22                    ret
                   
                   subnums:
                   ; This routine subtracts the number in R2 from the number in
01B5: C0 E0                 push acc                                ; pushes th
01B7: 89 E0                 mov acc, R1                             ; moves R1 
01B9: 9A                    subb a, R2                              ; subtract 
01BA: F5 90                 mov P1, a                               ; move the 
01BC: 12 01 C2              lcall dispnum                   ; display the resul
01BF: D0 E0                 pop acc                                         ; p
01C1: 22                    ret
                            
                   dispnum:
                   ; This routine displays the result of the calculation on the
01C2: 75 F0 64              mov b, #64h                             ; put 100 i
01C5: 84                    div ab                                  ; the resul
01C6: 24 30                 add a, #30h                             ; mask the 
01C8: 12 01 6E              lcall sndchr                    ; send the first nu
01CB: E5 F0                 mov a, b                                ; move the 
01CD: 75 F0 0A              mov b, #0Ah                             ; move 10 i
01D0: 84                    div ab
01D1: 24 30                 add a, #30h                             ; mask the 
01D3: 12 01 6E              lcall sndchr                    ; send the second n
01D6: E5 F0                 mov a, b                                ; move the 
01D8: 24 30                 add a, #30h                             ; mask the 
01DA: 12 01 6E              lcall sndchr                    ; send the third nu
01DD: 22                    ret
